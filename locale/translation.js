// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Delays');
gettext('Edge-detectors');
gettext('Init');
gettext('Verilog');
gettext('Delay-tic-x01');
gettext('Delay-tic-x1: One system clock period (tic) delay');
gettext('D Flip-flop (verilog implementation)');
gettext('System clock');
gettext('D Flip-Flop');
gettext('Input signal');
gettext('Signal delayed 1 tic');
gettext('Not connected');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('Output');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Delay-tic-x02');
gettext('Delay-tic-x2: Two system clock period (tic) delay');
gettext('1-tic delay');
gettext('Signal delayed 2 tics');
gettext('Delay-tic-x03');
gettext('Delay-tic-x3: 3 system clock period (tic) delay');
gettext('Signal delayed 3 tics');
gettext('Delay-tic-x04');
gettext('Delay-tic-x4: 4 system clock period (tic) delay');
gettext('Signal delayed 4 tics');
gettext('Delay-tic-x08');
gettext('Delay-tic-x8: 8 system clock period (tic) delay');
gettext('4-tic delay');
gettext('Signal delayed 8 tics');
gettext('Delay-tic-x16');
gettext('Delay-tic-x16: 16 system clock period (tic) delay');
gettext('Signal delayed 16 tics');
gettext('Delay-tic-x32');
gettext('Delay-tic-x32: 32 system clock period (tic) delay');
gettext('8-tic delay');
gettext('Signal delayed 32 tics');
gettext('Delay-tic-x02-ver');
gettext('Delay-tic-x2: Two system clock period (tic) delay (Verilog implementation)');
gettext('Delay-tic-x03-ver');
gettext('Delay-tic-x3: 3 system clock period (tic) delay (Verilog implementation)');
gettext('Delay-tic-x04-ver');
gettext('Delay-tic-x4: 4 system clock period (tic) delay (Verilog implementation)');
gettext('Delay-tic-x08-ver');
gettext('Delay-tic-x8: 8 system clock period (tic) delay (Verilog implementation)');
gettext('Delay-tic-x16-ver');
gettext('Delay-tic-x16: 16 system clock period (tic) delay (Verilog implementation)');
gettext('Delay-tic-x32-ver');
gettext('Delay-tic-x32: 32 system clock period (tic) delay (Verilog implementation)');
gettext('Edges');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('XOR gate: two bits input xor gate');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('Falling-edge');
gettext('Falling-edge detector. It generates a 1-period pulse (tic) when a falling edge is detected on the input');
gettext('Puerta NOT');
gettext('Puerta AND');
gettext('## Falling edge detector\n\nIt generates a 1-period pulse (tic) when a falling edge is detected on the  \ninput signal');
gettext('If the current signal is 0 and its value in  \nthe previous clock cycle was 1, it means  \nthat a falling edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a falling edge  \nand its detection');
gettext('Rising-edge');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('Start');
gettext('Start-signal: The output is initially 0. After the first system clock cycle it changes to 1, and remains stable until the system is reset');
gettext('Constant bit 1');
gettext('init-tic');
gettext('Init-tic: Generate an initial tic when the system clock starts');
gettext('Constant bit 0');
gettext('Initial value: 0');
gettext('Initial value: 1');
gettext('Rising edge');
gettext('Falling edge');
gettext('Delays');
gettext('Edge-detectors');
gettext('Init');
gettext('00-Index');
gettext('# INDEX: IceSignals Collection');
gettext('## Delays');
gettext('## Edge detectors');
gettext('## Init');
gettext('Init-tic');
gettext('Delay-tic-x01');
gettext('Delay-tic-x02');
gettext('Delay-tic-x03');
gettext('Delay-tic-x04');
gettext('Delay-tic-x08');
gettext('Alhambra-II');
gettext('01-icerok-test');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Puerta XOR');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('Contador módulo M, ascendente, de 16 bits, con reset ');
gettext('Un bit constante a 1');
gettext('16B memory icerok probe');
gettext('16B memory. Bus interface');
gettext('16 Bytes Synchronous memory');
gettext('Join the fields into one 16B memory bus');
gettext('Split a 16B memory bus into its fields');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('16B memory sample machine. Captura the input data and store it in the memory');
gettext('Puerta OR');
gettext('8-bits register (in verilog)');
gettext('Multiplexor de 2 a 1 de 14 bits');
gettext('Máquina de contar, de 4 bits');
gettext('Biestable de almacenamiento del estado de la máquina');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Detector de flancos de subida y bajada. Emite tic por las salidas correspondientes al detecta los flancos');
gettext('Registro de 4 bits con entrada de reset');
gettext('Sumador de un operando de 4 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 4 bits');
gettext('Valor genérico constante (menos 1), de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('16B memory download machine');
gettext('Un bit constante a 0');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Transmit one character to the STDOUT bus');
gettext('Extract the next signal from the stdout bus');
gettext('10 bits, 2-1 Multiplexor');
gettext('stdout bus joiner (data + tic)');
gettext('Serial transmiter for the stdout bus (1 char buffer). Sysclk parameter');
gettext('stdout bus splitter into data and tic signals');
gettext('Convert the 1-bit next signal into a 10-bit stdout bus');
gettext('Serial transmitter with a buffer for 1 byte');
gettext('1-byte buffer');
gettext('Registro de 8 bits');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Serial transmitter with system clock freq parameter');
gettext('2 channel icerok probe adaptor');
gettext('Agregador de 2 buses de 6 y 2-bits a bus de 8-bits');
gettext('Valor constante 0, de 6 bits');
gettext('Valor genérico constante, de 6 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('# Delay-tic-x1: Testing with Icerok\n\nA tic is emited whe the pushbutton is pressed\nThis pulse is delayed 1 tic. Both signals, the pulse and  \nthe delayed pulse, are capture');
gettext('Delayed signal');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Previous input  \nvalue');
gettext('Current input  \nvalue');
gettext('There is a change  \non the input');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('**Parámetro**: Módulo del contador');
gettext('## Icerok-probe machine\n\nMachine for capturing data, storing it in the memory and transmit  \nto the computer by serial port');
gettext('Writing the data to the memory on  \nevery system clock cycle');
gettext('Transmiting the raw memory contents  \nto the computer, by serial port');
gettext('When the sampling is done  \ntransmit the information to  \nthe computer');
gettext('Memory were the data  \nis stored');
gettext('Reading data from memory  \nReading bus status');
gettext('Calculate if the bus can be taken');
gettext('The bus is available');
gettext('This circuits wants  \nto use the bus');
gettext('The bus has been already  \ntaken');
gettext('One cycle after the machine is done  \nthe bus is already taken to write  \nthe bbusy signal to 0 and allow  \nother circuits to use it');
gettext('The output bus is controlled  \nby this circuit (1) or  \nremain untouched (0)');
gettext('The reading machine  \ncan be started');
gettext('## Sample machine\n\nRead the input data, (one byte per clock cycle) and store it into the memory\n\n');
gettext('**Reloj del sistema**');
gettext('**Estado de**  \n**la máquina**');
gettext('Máquina encendida');
gettext('Máquina apagada  \n(rst = 1)');
gettext('Tic de arranque');
gettext('Tic de fin');
gettext('**Contador de ciclos**');
gettext('Número de ciclos  \ncontados');
gettext('Valor  \nincrementado');
gettext('### Salidas');
gettext('Estado de la máquina');
gettext('Ciclo actual');
gettext('Cuenta finalizada');
gettext('Ejecutar el ciclo');
gettext('Número de ciclos  \na contar');
gettext('¿Estamos en el  \nciclo k-1?');
gettext('Solo se hace caso a la  \nentrada next si la  \nmáquina está encendida');
gettext('Nuevo ciclo');
gettext('Si es el ciclo k-1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Apagar la  \nmáquina');
gettext('Ciclo nuevo:  \nincrementar la cuenta');
gettext('El tic de start se saca  \npor exec para que se ejecute  \nel primer ciclo');
gettext('Si la máquina está  \napagada, las señales  \nde ejecución no pueden  \nsalir!');
gettext('Retrasar la señal un ciclo  \nmientras que se detecta si  \nla máquina ha finalizado o no');
gettext('**Tic de apagado**');
gettext('**Tic de encendido**');
gettext('**Inicializar**');
gettext('**Estado de la máquina**');
gettext('## Detector doble: flancos de subida y bajada\n\nSe detectan tanto los flancos de subida como de bajada y se emite los  \ntics por sus salidas correspondientes');
gettext('Señal de  \nentrada');
gettext('Reloj del  \nsistema');
gettext('Reading machine');
gettext('## Download machine\n\nTransmit all the memory contents through the serial port  \nThe bytes are transmited raw (in binary). No ascii encoding  \nThere should be a program running on the computer capable of  \nreading these raw bytes');
gettext('## PUTC: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification    \n\nWhen the machine starts, the char is outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The byte from the  \ninput char is transmited');
gettext('Char to be transmited');
gettext('State of the machine:  \n1: ON: transmitting  \n2: OFF: transparent mode  ');
gettext('If the machine is on  \nand the character has been  \ntransmitted: Turn it off');
gettext('The machine has finished');
gettext('**STDOUT BUS**');
gettext('**Create the bus**  \nfrom the data and tic signals');
gettext('Transparent mode...  \nor not');
gettext('## STDOUT serial\n\nSerial transmitter for the STDOUT bus\n');
gettext('**STDOUT Bus**  \n* Data to transmit (8 bits)  \n* tic (1 bit)\n* data sent (done tic, 1 bit)');
gettext('Empty Buffer  \n(There is no byte  \nwaiting)');
gettext('Byte stored in the  \nbuffer, waiting to be  \ntransmitted when the  \ntransmitter is ready');
gettext('Buffer state:  \n0: empty  \n1: full');
gettext('Transmitter ready');
gettext('If the transmittter is ready  \nand there is a character  \nin the buffer: Transmit!');
gettext('Serial transmitter state');
gettext('Alhambra-II');
gettext('01-icerok-test');
gettext('2-tic delay');
gettext('# Delay-tic-x2: Testing with Icerok\n\nA tic is emited whe the pushbutton is pressed  \nThis pulse is delayed 2 tics. Both signals, the pulse and  \nthe delayed pulse, are capture');
gettext('Alhambra-II');
gettext('01-icerok-test');
gettext('Delay-tic-x3: Two system clock period (tic) delay');
gettext('3-tic delay');
gettext('# Delay-tic-x3: Testing with Icerok\n\nA tic is emited whe the pushbutton is pressed  \nThis pulse is delayed 3 tics. Both signals, the pulse and  \nthe delayed pulse, are capture');
gettext('Alhambra-II');
gettext('01-icerok-test');
gettext('# Delay-tic-x8: Testing with Icerok\n\nA tic is emited whe the pushbutton is pressed  \nThis pulse is delayed 8 tics. Both signals, the pulse and  \nthe delayed pulse, are capture');
gettext('Alhambra-II');
gettext('01-icerok-test');
gettext('Edges');
gettext('Falling-edge');
gettext('Rising-edge');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('Contador básico, de 2 bits');
gettext('Button');
gettext('Edges detector');
gettext('2-bits counter');
gettext('LEDs');
gettext('# Edges detector: Manual testing with a button and two LEDs\n\nThe 2-bits counter is incremented either when the button is pressed or released\n\n');
gettext('**Contador básico**');
gettext('**Valor inicial**');
gettext('**Incremento**');
gettext('02-icerok-btn-leds');
gettext('Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador');
gettext('Two bits input And gate');
gettext('# Edges detector: Simple test with icerok\n\n\n\n\n');
gettext('## Unit Under Test');
gettext('Input');
gettext('Start the capture!');
gettext('The in and out signal are  \ncaptured');
gettext('Icerok logic analycer:  It  \ncapture 16 samples and send  \nthem to the PC');
gettext('## Data capture with Icerok');
gettext('## Stimulus generation');
gettext('Delay the signal 2 tics');
gettext('**Pulsador-tic**');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('Falling-edge  \ndetector');
gettext('# Falling-edge detector: Manual testing with a button and two LEDs\n\nWhen the button is released, its state signal changes from 1 to 0 and a Falling-edge is generated  \nThe detector emits a tic that increment the 2-bit counter. So, everytime the button is released  \nthe counter is incremented\n\n\n');
gettext('02-icerok-btn-leds');
gettext('Detector de flanco de bajada. Emite un tic cuando detecta un flanco descendente');
gettext('# Falling-edge detector: Simple test with icerok\n\n\n\n\n');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('Rising-edge  \ndetector');
gettext('# Rising-edge detector: Manual testing with a button and two LEDs\n\nWhen the button is pressed, its state signal changes from 0 to 1 and a rising-edge is generated  \nThe detector emits a tic that increment the 2-bit counter. So, everytime the button is pressed  \nthe counter is incremented\n\n\n');
gettext('02-icerok-btn-leds');
gettext('# Rising-edge detector: Simple test with icerok\n\n\n\n\n');
gettext('Delay the signal 1 tic');
gettext('Init-tic');
gettext('Start');
gettext('Alhambra-II');
gettext('01-icerok-test');
gettext('1 channel icerok probe adaptor');
gettext('Agregador de un bus de 7 bits y un cable a bus de 8-bits');
gettext('Valor constante 0, de 7 bits');
gettext('Valor genérico constante, de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('# Init-tic Block: Testing with icerok\n\nBefore capturing the init tic signal it is necesary to delay it  \nfor 32 cycles to give time to logic analicer to initialize  \n\nThe capture starts in that moment. The init tic signal is delayed  \ntwo more cycles to better see its step form');
gettext('Initial delay for logic analyzer  \ninitialization');
gettext('The capture starts on the  \nrising edge from the start signal');
gettext('Time origin (t=0)');
gettext('Delay the signal 2 cycles  \nfor seeing its 0 part');
gettext('## Unit Under test');
gettext('## Logic analyzer');
gettext('Icerok probe');
gettext('2 channel adaptor');
gettext('Signal to measure');
gettext('Alhambra-II');
gettext('01-icerok-test');
gettext('# Start Block: Testing with icerok\n\nBefore capturing the start signal it is necesary to delay it  \nfor 32 cycles to give time to logic analicer to initialize  \n\nThe capture starts in that moment. The start signal is delayed  \ntwo more cycles to better see its step form');
